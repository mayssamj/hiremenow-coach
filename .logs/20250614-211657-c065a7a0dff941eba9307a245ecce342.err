 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 â¨¯ ./app/comprehensive/page.tsx
Error: 
  [31mx[0m the name `getDifficultyColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:61:1]
 [2m 61[0m |   const [loading, setLoading] = useState(true)
 [2m 62[0m |   const [error, setError] = useState<string | null>(null)
 [2m 63[0m | 
 [2m 64[0m |   const getDifficultyColor = (difficulty: string) => {
     : [31;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [31;1m`-- [31;1mprevious definition of `getDifficultyColor` here[0m[0m
 [2m 65[0m |     switch (difficulty) {
 [2m 66[0m |       case 'EASY':
 [2m 67[0m |         return 'bg-green-100 text-green-800'
 [2m 68[0m |       case 'MEDIUM':
 [2m 69[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m 70[0m |       case 'HARD':
 [2m 71[0m |         return 'bg-red-100 text-red-800'
 [2m 72[0m |       default:
 [2m 73[0m |         return 'bg-gray-100 text-gray-800'
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     console.log('Component mounted, fetching initial data...')
 [2m 97[0m |     fetchDataWithParams({
 [2m 98[0m |       company: 'all',
 [2m 99[0m |       category: 'all',
 [2m100[0m |       difficulty: 'all',
 [2m101[0m |       type: 'all',
 [2m102[0m |       search: ''
 [2m103[0m |     })
 [2m104[0m |   }, [])
 [2m105[0m | 
 [2m106[0m |   // Handle filter changes after initial load
 [2m107[0m |   useEffect(() => {
 [2m108[0m |     if (!loading) {
 [2m109[0m |       console.log('Filters changed, refetching data...')
 [2m110[0m |       fetchData()
 [2m111[0m |     }
 [2m112[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m113[0m | 
 [2m114[0m |   const fetchDataWithParams = async (filters: {
 [2m115[0m |     company: string
 [2m116[0m |     category: string
 [2m117[0m |     difficulty: string
 [2m118[0m |     type: string
 [2m119[0m |     search: string
 [2m120[0m |   }) => {
 [2m121[0m |     try {
 [2m122[0m |       console.log('Fetching data with filters:', filters)
 [2m123[0m |       setError(null)
 [2m124[0m |       
 [2m125[0m |       // Build query parameters for questions API
 [2m126[0m |       const params = new URLSearchParams()
 [2m127[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m128[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m129[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m130[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m131[0m |       if (filters.search) params.set('search', filters.search)
 [2m132[0m | 
 [2m133[0m |       console.log('API URLs:', {
 [2m134[0m |         companies: '/api/companies',
 [2m135[0m |         categories: '/api/categories',
 [2m136[0m |         questions: `/api/questions?${params.toString()}`
 [2m137[0m |       })
 [2m138[0m | 
 [2m139[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m140[0m |         fetch('/api/companies'),
 [2m141[0m |         fetch('/api/categories'),
 [2m142[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m143[0m |       ])
 [2m144[0m | 
 [2m145[0m |       console.log('API responses status:', {
 [2m146[0m |         companies: companiesRes.status,
 [2m147[0m |         categories: categoriesRes.status,
 [2m148[0m |         questions: questionsRes.status
 [2m149[0m |       })
 [2m150[0m | 
 [2m151[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m152[0m |         throw new Error('One or more API calls failed')
 [2m153[0m |       }
 [2m154[0m | 
 [2m155[0m |       const companiesData = await companiesRes.json()
 [2m156[0m |       const categoriesData = await categoriesRes.json()
 [2m157[0m |       const questionsData = await questionsRes.json()
 [2m158[0m | 
 [2m159[0m |       console.log('API data lengths:', {
 [2m160[0m |         companies: companiesData.length,
 [2m161[0m |         categories: categoriesData.length,
 [2m162[0m |         questions: questionsData.length
 [2m163[0m |       })
 [2m164[0m | 
 [2m165[0m |       setCompanies(companiesData || [])
 [2m166[0m |       setCategories(categoriesData || [])
 [2m167[0m |       setQuestions(questionsData || [])
 [2m168[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m169[0m |     } catch (error) {
 [2m170[0m |       console.error('Error fetching data:', error)
 [2m171[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m172[0m |     } finally {
 [2m173[0m |       setLoading(false)
 [2m174[0m |     }
 [2m175[0m |   }
 [2m176[0m | 
 [2m177[0m |   const fetchData = async () => {
 [2m178[0m |     await fetchDataWithParams({
 [2m179[0m |       company: selectedCompany,
 [2m180[0m |       category: selectedCategory,
 [2m181[0m |       difficulty: selectedDifficulty,
 [2m182[0m |       type: selectedType,
 [2m183[0m |       search: searchQuery
 [2m184[0m |     })
 [2m185[0m |   }
 [2m186[0m | 
 [2m187[0m | 
 [2m188[0m | 
 [2m189[0m |   const getStatusIcon = (status: string) => {
 [2m190[0m |     switch (status) {
 [2m191[0m |       case 'PREPARED':
 [2m192[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m193[0m |       case 'IN_PROGRESS':
 [2m194[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m195[0m |       case 'NEEDS_WORK':
 [2m196[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m197[0m |       default:
 [2m198[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m199[0m |     }
 [2m200[0m |   }
 [2m201[0m | 
 [2m202[0m |   const getDifficultyColor = (difficulty: string) => {
     : [33;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [33;1m`-- [33;1m`getDifficultyColor` redefined here[0m[0m
 [2m203[0m |     switch (difficulty) {
 [2m204[0m |       case 'EASY':
 [2m205[0m |         return 'bg-green-100 text-green-800'
     `----

  [31mx[0m the name `getTypeColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:74:1]
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
     : [31;1m        ^^^^^^|^^^^^[0m
     :               [31;1m`-- [31;1mprevious definition of `getTypeColor` here[0m[0m
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     console.log('Component mounted, fetching initial data...')
 [2m 97[0m |     fetchDataWithParams({
 [2m 98[0m |       company: 'all',
 [2m 99[0m |       category: 'all',
 [2m100[0m |       difficulty: 'all',
 [2m101[0m |       type: 'all',
 [2m102[0m |       search: ''
 [2m103[0m |     })
 [2m104[0m |   }, [])
 [2m105[0m | 
 [2m106[0m |   // Handle filter changes after initial load
 [2m107[0m |   useEffect(() => {
 [2m108[0m |     if (!loading) {
 [2m109[0m |       console.log('Filters changed, refetching data...')
 [2m110[0m |       fetchData()
 [2m111[0m |     }
 [2m112[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m113[0m | 
 [2m114[0m |   const fetchDataWithParams = async (filters: {
 [2m115[0m |     company: string
 [2m116[0m |     category: string
 [2m117[0m |     difficulty: string
 [2m118[0m |     type: string
 [2m119[0m |     search: string
 [2m120[0m |   }) => {
 [2m121[0m |     try {
 [2m122[0m |       console.log('Fetching data with filters:', filters)
 [2m123[0m |       setError(null)
 [2m124[0m |       
 [2m125[0m |       // Build query parameters for questions API
 [2m126[0m |       const params = new URLSearchParams()
 [2m127[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m128[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m129[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m130[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m131[0m |       if (filters.search) params.set('search', filters.search)
 [2m132[0m | 
 [2m133[0m |       console.log('API URLs:', {
 [2m134[0m |         companies: '/api/companies',
 [2m135[0m |         categories: '/api/categories',
 [2m136[0m |         questions: `/api/questions?${params.toString()}`
 [2m137[0m |       })
 [2m138[0m | 
 [2m139[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m140[0m |         fetch('/api/companies'),
 [2m141[0m |         fetch('/api/categories'),
 [2m142[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m143[0m |       ])
 [2m144[0m | 
 [2m145[0m |       console.log('API responses status:', {
 [2m146[0m |         companies: companiesRes.status,
 [2m147[0m |         categories: categoriesRes.status,
 [2m148[0m |         questions: questionsRes.status
 [2m149[0m |       })
 [2m150[0m | 
 [2m151[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m152[0m |         throw new Error('One or more API calls failed')
 [2m153[0m |       }
 [2m154[0m | 
 [2m155[0m |       const companiesData = await companiesRes.json()
 [2m156[0m |       const categoriesData = await categoriesRes.json()
 [2m157[0m |       const questionsData = await questionsRes.json()
 [2m158[0m | 
 [2m159[0m |       console.log('API data lengths:', {
 [2m160[0m |         companies: companiesData.length,
 [2m161[0m |         categories: categoriesData.length,
 [2m162[0m |         questions: questionsData.length
 [2m163[0m |       })
 [2m164[0m | 
 [2m165[0m |       setCompanies(companiesData || [])
 [2m166[0m |       setCategories(categoriesData || [])
 [2m167[0m |       setQuestions(questionsData || [])
 [2m168[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m169[0m |     } catch (error) {
 [2m170[0m |       console.error('Error fetching data:', error)
 [2m171[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m172[0m |     } finally {
 [2m173[0m |       setLoading(false)
 [2m174[0m |     }
 [2m175[0m |   }
 [2m176[0m | 
 [2m177[0m |   const fetchData = async () => {
 [2m178[0m |     await fetchDataWithParams({
 [2m179[0m |       company: selectedCompany,
 [2m180[0m |       category: selectedCategory,
 [2m181[0m |       difficulty: selectedDifficulty,
 [2m182[0m |       type: selectedType,
 [2m183[0m |       search: searchQuery
 [2m184[0m |     })
 [2m185[0m |   }
 [2m186[0m | 
 [2m187[0m | 
 [2m188[0m | 
 [2m189[0m |   const getStatusIcon = (status: string) => {
 [2m190[0m |     switch (status) {
 [2m191[0m |       case 'PREPARED':
 [2m192[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m193[0m |       case 'IN_PROGRESS':
 [2m194[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m195[0m |       case 'NEEDS_WORK':
 [2m196[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m197[0m |       default:
 [2m198[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m199[0m |     }
 [2m200[0m |   }
 [2m201[0m | 
 [2m202[0m |   const getDifficultyColor = (difficulty: string) => {
 [2m203[0m |     switch (difficulty) {
 [2m204[0m |       case 'EASY':
 [2m205[0m |         return 'bg-green-100 text-green-800'
 [2m206[0m |       case 'MEDIUM':
 [2m207[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m208[0m |       case 'HARD':
 [2m209[0m |         return 'bg-red-100 text-red-800'
 [2m210[0m |       default:
 [2m211[0m |         return 'bg-gray-100 text-gray-800'
 [2m212[0m |     }
 [2m213[0m |   }
 [2m214[0m | 
 [2m215[0m |   const getTypeColor = (type: string) => {
     : [33;1m        ^^^^^^|^^^^^[0m
     :               [33;1m`-- [33;1m`getTypeColor` redefined here[0m[0m
 [2m216[0m |     switch (type) {
 [2m217[0m |       case 'BEHAVIORAL':
 [2m218[0m |         return 'bg-blue-100 text-blue-800'
     `----

Import trace for requested module:
./app/comprehensive/page.tsx
 â¨¯ ./app/comprehensive/page.tsx
Error: 
  [31mx[0m the name `getDifficultyColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:61:1]
 [2m 61[0m |   const [loading, setLoading] = useState(true)
 [2m 62[0m |   const [error, setError] = useState<string | null>(null)
 [2m 63[0m | 
 [2m 64[0m |   const getDifficultyColor = (difficulty: string) => {
     : [31;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [31;1m`-- [31;1mprevious definition of `getDifficultyColor` here[0m[0m
 [2m 65[0m |     switch (difficulty) {
 [2m 66[0m |       case 'EASY':
 [2m 67[0m |         return 'bg-green-100 text-green-800'
 [2m 68[0m |       case 'MEDIUM':
 [2m 69[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m 70[0m |       case 'HARD':
 [2m 71[0m |         return 'bg-red-100 text-red-800'
 [2m 72[0m |       default:
 [2m 73[0m |         return 'bg-gray-100 text-gray-800'
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     console.log('Component mounted, fetching initial data...')
 [2m 97[0m |     fetchDataWithParams({
 [2m 98[0m |       company: 'all',
 [2m 99[0m |       category: 'all',
 [2m100[0m |       difficulty: 'all',
 [2m101[0m |       type: 'all',
 [2m102[0m |       search: ''
 [2m103[0m |     })
 [2m104[0m |   }, [])
 [2m105[0m | 
 [2m106[0m |   // Handle filter changes after initial load
 [2m107[0m |   useEffect(() => {
 [2m108[0m |     if (!loading) {
 [2m109[0m |       console.log('Filters changed, refetching data...')
 [2m110[0m |       fetchData()
 [2m111[0m |     }
 [2m112[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m113[0m | 
 [2m114[0m |   const fetchDataWithParams = async (filters: {
 [2m115[0m |     company: string
 [2m116[0m |     category: string
 [2m117[0m |     difficulty: string
 [2m118[0m |     type: string
 [2m119[0m |     search: string
 [2m120[0m |   }) => {
 [2m121[0m |     try {
 [2m122[0m |       console.log('Fetching data with filters:', filters)
 [2m123[0m |       setError(null)
 [2m124[0m |       
 [2m125[0m |       // Build query parameters for questions API
 [2m126[0m |       const params = new URLSearchParams()
 [2m127[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m128[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m129[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m130[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m131[0m |       if (filters.search) params.set('search', filters.search)
 [2m132[0m | 
 [2m133[0m |       console.log('API URLs:', {
 [2m134[0m |         companies: '/api/companies',
 [2m135[0m |         categories: '/api/categories',
 [2m136[0m |         questions: `/api/questions?${params.toString()}`
 [2m137[0m |       })
 [2m138[0m | 
 [2m139[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m140[0m |         fetch('/api/companies'),
 [2m141[0m |         fetch('/api/categories'),
 [2m142[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m143[0m |       ])
 [2m144[0m | 
 [2m145[0m |       console.log('API responses status:', {
 [2m146[0m |         companies: companiesRes.status,
 [2m147[0m |         categories: categoriesRes.status,
 [2m148[0m |         questions: questionsRes.status
 [2m149[0m |       })
 [2m150[0m | 
 [2m151[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m152[0m |         throw new Error('One or more API calls failed')
 [2m153[0m |       }
 [2m154[0m | 
 [2m155[0m |       const companiesData = await companiesRes.json()
 [2m156[0m |       const categoriesData = await categoriesRes.json()
 [2m157[0m |       const questionsData = await questionsRes.json()
 [2m158[0m | 
 [2m159[0m |       console.log('API data lengths:', {
 [2m160[0m |         companies: companiesData.length,
 [2m161[0m |         categories: categoriesData.length,
 [2m162[0m |         questions: questionsData.length
 [2m163[0m |       })
 [2m164[0m | 
 [2m165[0m |       setCompanies(companiesData || [])
 [2m166[0m |       setCategories(categoriesData || [])
 [2m167[0m |       setQuestions(questionsData || [])
 [2m168[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m169[0m |     } catch (error) {
 [2m170[0m |       console.error('Error fetching data:', error)
 [2m171[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m172[0m |     } finally {
 [2m173[0m |       setLoading(false)
 [2m174[0m |     }
 [2m175[0m |   }
 [2m176[0m | 
 [2m177[0m |   const fetchData = async () => {
 [2m178[0m |     await fetchDataWithParams({
 [2m179[0m |       company: selectedCompany,
 [2m180[0m |       category: selectedCategory,
 [2m181[0m |       difficulty: selectedDifficulty,
 [2m182[0m |       type: selectedType,
 [2m183[0m |       search: searchQuery
 [2m184[0m |     })
 [2m185[0m |   }
 [2m186[0m | 
 [2m187[0m | 
 [2m188[0m | 
 [2m189[0m |   const getStatusIcon = (status: string) => {
 [2m190[0m |     switch (status) {
 [2m191[0m |       case 'PREPARED':
 [2m192[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m193[0m |       case 'IN_PROGRESS':
 [2m194[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m195[0m |       case 'NEEDS_WORK':
 [2m196[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m197[0m |       default:
 [2m198[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m199[0m |     }
 [2m200[0m |   }
 [2m201[0m | 
 [2m202[0m |   const getDifficultyColor = (difficulty: string) => {
     : [33;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [33;1m`-- [33;1m`getDifficultyColor` redefined here[0m[0m
 [2m203[0m |     switch (difficulty) {
 [2m204[0m |       case 'EASY':
 [2m205[0m |         return 'bg-green-100 text-green-800'
     `----

  [31mx[0m the name `getTypeColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:74:1]
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
     : [31;1m        ^^^^^^|^^^^^[0m
     :               [31;1m`-- [31;1mprevious definition of `getTypeColor` here[0m[0m
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     console.log('Component mounted, fetching initial data...')
 [2m 97[0m |     fetchDataWithParams({
 [2m 98[0m |       company: 'all',
 [2m 99[0m |       category: 'all',
 [2m100[0m |       difficulty: 'all',
 [2m101[0m |       type: 'all',
 [2m102[0m |       search: ''
 [2m103[0m |     })
 [2m104[0m |   }, [])
 [2m105[0m | 
 [2m106[0m |   // Handle filter changes after initial load
 [2m107[0m |   useEffect(() => {
 [2m108[0m |     if (!loading) {
 [2m109[0m |       console.log('Filters changed, refetching data...')
 [2m110[0m |       fetchData()
 [2m111[0m |     }
 [2m112[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m113[0m | 
 [2m114[0m |   const fetchDataWithParams = async (filters: {
 [2m115[0m |     company: string
 [2m116[0m |     category: string
 [2m117[0m |     difficulty: string
 [2m118[0m |     type: string
 [2m119[0m |     search: string
 [2m120[0m |   }) => {
 [2m121[0m |     try {
 [2m122[0m |       console.log('Fetching data with filters:', filters)
 [2m123[0m |       setError(null)
 [2m124[0m |       
 [2m125[0m |       // Build query parameters for questions API
 [2m126[0m |       const params = new URLSearchParams()
 [2m127[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m128[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m129[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m130[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m131[0m |       if (filters.search) params.set('search', filters.search)
 [2m132[0m | 
 [2m133[0m |       console.log('API URLs:', {
 [2m134[0m |         companies: '/api/companies',
 [2m135[0m |         categories: '/api/categories',
 [2m136[0m |         questions: `/api/questions?${params.toString()}`
 [2m137[0m |       })
 [2m138[0m | 
 [2m139[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m140[0m |         fetch('/api/companies'),
 [2m141[0m |         fetch('/api/categories'),
 [2m142[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m143[0m |       ])
 [2m144[0m | 
 [2m145[0m |       console.log('API responses status:', {
 [2m146[0m |         companies: companiesRes.status,
 [2m147[0m |         categories: categoriesRes.status,
 [2m148[0m |         questions: questionsRes.status
 [2m149[0m |       })
 [2m150[0m | 
 [2m151[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m152[0m |         throw new Error('One or more API calls failed')
 [2m153[0m |       }
 [2m154[0m | 
 [2m155[0m |       const companiesData = await companiesRes.json()
 [2m156[0m |       const categoriesData = await categoriesRes.json()
 [2m157[0m |       const questionsData = await questionsRes.json()
 [2m158[0m | 
 [2m159[0m |       console.log('API data lengths:', {
 [2m160[0m |         companies: companiesData.length,
 [2m161[0m |         categories: categoriesData.length,
 [2m162[0m |         questions: questionsData.length
 [2m163[0m |       })
 [2m164[0m | 
 [2m165[0m |       setCompanies(companiesData || [])
 [2m166[0m |       setCategories(categoriesData || [])
 [2m167[0m |       setQuestions(questionsData || [])
 [2m168[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m169[0m |     } catch (error) {
 [2m170[0m |       console.error('Error fetching data:', error)
 [2m171[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m172[0m |     } finally {
 [2m173[0m |       setLoading(false)
 [2m174[0m |     }
 [2m175[0m |   }
 [2m176[0m | 
 [2m177[0m |   const fetchData = async () => {
 [2m178[0m |     await fetchDataWithParams({
 [2m179[0m |       company: selectedCompany,
 [2m180[0m |       category: selectedCategory,
 [2m181[0m |       difficulty: selectedDifficulty,
 [2m182[0m |       type: selectedType,
 [2m183[0m |       search: searchQuery
 [2m184[0m |     })
 [2m185[0m |   }
 [2m186[0m | 
 [2m187[0m | 
 [2m188[0m | 
 [2m189[0m |   const getStatusIcon = (status: string) => {
 [2m190[0m |     switch (status) {
 [2m191[0m |       case 'PREPARED':
 [2m192[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m193[0m |       case 'IN_PROGRESS':
 [2m194[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m195[0m |       case 'NEEDS_WORK':
 [2m196[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m197[0m |       default:
 [2m198[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m199[0m |     }
 [2m200[0m |   }
 [2m201[0m | 
 [2m202[0m |   const getDifficultyColor = (difficulty: string) => {
 [2m203[0m |     switch (difficulty) {
 [2m204[0m |       case 'EASY':
 [2m205[0m |         return 'bg-green-100 text-green-800'
 [2m206[0m |       case 'MEDIUM':
 [2m207[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m208[0m |       case 'HARD':
 [2m209[0m |         return 'bg-red-100 text-red-800'
 [2m210[0m |       default:
 [2m211[0m |         return 'bg-gray-100 text-gray-800'
 [2m212[0m |     }
 [2m213[0m |   }
 [2m214[0m | 
 [2m215[0m |   const getTypeColor = (type: string) => {
     : [33;1m        ^^^^^^|^^^^^[0m
     :               [33;1m`-- [33;1m`getTypeColor` redefined here[0m[0m
 [2m216[0m |     switch (type) {
 [2m217[0m |       case 'BEHAVIORAL':
 [2m218[0m |         return 'bg-blue-100 text-blue-800'
     `----

Import trace for requested module:
./app/comprehensive/page.tsx
 â¨¯ ./app/comprehensive/page.tsx
Error: 
  [31mx[0m the name `getDifficultyColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:61:1]
 [2m 61[0m |   const [loading, setLoading] = useState(true)
 [2m 62[0m |   const [error, setError] = useState<string | null>(null)
 [2m 63[0m | 
 [2m 64[0m |   const getDifficultyColor = (difficulty: string) => {
     : [31;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [31;1m`-- [31;1mprevious definition of `getDifficultyColor` here[0m[0m
 [2m 65[0m |     switch (difficulty) {
 [2m 66[0m |       case 'EASY':
 [2m 67[0m |         return 'bg-green-100 text-green-800'
 [2m 68[0m |       case 'MEDIUM':
 [2m 69[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m 70[0m |       case 'HARD':
 [2m 71[0m |         return 'bg-red-100 text-red-800'
 [2m 72[0m |       default:
 [2m 73[0m |         return 'bg-gray-100 text-gray-800'
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     console.log('Component mounted, fetching initial data...')
 [2m 97[0m |     fetchDataWithParams({
 [2m 98[0m |       company: 'all',
 [2m 99[0m |       category: 'all',
 [2m100[0m |       difficulty: 'all',
 [2m101[0m |       type: 'all',
 [2m102[0m |       search: ''
 [2m103[0m |     })
 [2m104[0m |   }, [])
 [2m105[0m | 
 [2m106[0m |   // Handle filter changes after initial load
 [2m107[0m |   useEffect(() => {
 [2m108[0m |     if (!loading) {
 [2m109[0m |       console.log('Filters changed, refetching data...')
 [2m110[0m |       fetchData()
 [2m111[0m |     }
 [2m112[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m113[0m | 
 [2m114[0m |   const fetchDataWithParams = async (filters: {
 [2m115[0m |     company: string
 [2m116[0m |     category: string
 [2m117[0m |     difficulty: string
 [2m118[0m |     type: string
 [2m119[0m |     search: string
 [2m120[0m |   }) => {
 [2m121[0m |     try {
 [2m122[0m |       console.log('Fetching data with filters:', filters)
 [2m123[0m |       setError(null)
 [2m124[0m |       
 [2m125[0m |       // Build query parameters for questions API
 [2m126[0m |       const params = new URLSearchParams()
 [2m127[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m128[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m129[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m130[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m131[0m |       if (filters.search) params.set('search', filters.search)
 [2m132[0m | 
 [2m133[0m |       console.log('API URLs:', {
 [2m134[0m |         companies: '/api/companies',
 [2m135[0m |         categories: '/api/categories',
 [2m136[0m |         questions: `/api/questions?${params.toString()}`
 [2m137[0m |       })
 [2m138[0m | 
 [2m139[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m140[0m |         fetch('/api/companies'),
 [2m141[0m |         fetch('/api/categories'),
 [2m142[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m143[0m |       ])
 [2m144[0m | 
 [2m145[0m |       console.log('API responses status:', {
 [2m146[0m |         companies: companiesRes.status,
 [2m147[0m |         categories: categoriesRes.status,
 [2m148[0m |         questions: questionsRes.status
 [2m149[0m |       })
 [2m150[0m | 
 [2m151[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m152[0m |         throw new Error('One or more API calls failed')
 [2m153[0m |       }
 [2m154[0m | 
 [2m155[0m |       const companiesData = await companiesRes.json()
 [2m156[0m |       const categoriesData = await categoriesRes.json()
 [2m157[0m |       const questionsData = await questionsRes.json()
 [2m158[0m | 
 [2m159[0m |       console.log('API data lengths:', {
 [2m160[0m |         companies: companiesData.length,
 [2m161[0m |         categories: categoriesData.length,
 [2m162[0m |         questions: questionsData.length
 [2m163[0m |       })
 [2m164[0m | 
 [2m165[0m |       setCompanies(companiesData || [])
 [2m166[0m |       setCategories(categoriesData || [])
 [2m167[0m |       setQuestions(questionsData || [])
 [2m168[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m169[0m |     } catch (error) {
 [2m170[0m |       console.error('Error fetching data:', error)
 [2m171[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m172[0m |     } finally {
 [2m173[0m |       setLoading(false)
 [2m174[0m |     }
 [2m175[0m |   }
 [2m176[0m | 
 [2m177[0m |   const fetchData = async () => {
 [2m178[0m |     await fetchDataWithParams({
 [2m179[0m |       company: selectedCompany,
 [2m180[0m |       category: selectedCategory,
 [2m181[0m |       difficulty: selectedDifficulty,
 [2m182[0m |       type: selectedType,
 [2m183[0m |       search: searchQuery
 [2m184[0m |     })
 [2m185[0m |   }
 [2m186[0m | 
 [2m187[0m | 
 [2m188[0m | 
 [2m189[0m |   const getStatusIcon = (status: string) => {
 [2m190[0m |     switch (status) {
 [2m191[0m |       case 'PREPARED':
 [2m192[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m193[0m |       case 'IN_PROGRESS':
 [2m194[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m195[0m |       case 'NEEDS_WORK':
 [2m196[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m197[0m |       default:
 [2m198[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m199[0m |     }
 [2m200[0m |   }
 [2m201[0m | 
 [2m202[0m |   const getDifficultyColor = (difficulty: string) => {
     : [33;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [33;1m`-- [33;1m`getDifficultyColor` redefined here[0m[0m
 [2m203[0m |     switch (difficulty) {
 [2m204[0m |       case 'EASY':
 [2m205[0m |         return 'bg-green-100 text-green-800'
     `----

  [31mx[0m the name `getTypeColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:74:1]
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
     : [31;1m        ^^^^^^|^^^^^[0m
     :               [31;1m`-- [31;1mprevious definition of `getTypeColor` here[0m[0m
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     console.log('Component mounted, fetching initial data...')
 [2m 97[0m |     fetchDataWithParams({
 [2m 98[0m |       company: 'all',
 [2m 99[0m |       category: 'all',
 [2m100[0m |       difficulty: 'all',
 [2m101[0m |       type: 'all',
 [2m102[0m |       search: ''
 [2m103[0m |     })
 [2m104[0m |   }, [])
 [2m105[0m | 
 [2m106[0m |   // Handle filter changes after initial load
 [2m107[0m |   useEffect(() => {
 [2m108[0m |     if (!loading) {
 [2m109[0m |       console.log('Filters changed, refetching data...')
 [2m110[0m |       fetchData()
 [2m111[0m |     }
 [2m112[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m113[0m | 
 [2m114[0m |   const fetchDataWithParams = async (filters: {
 [2m115[0m |     company: string
 [2m116[0m |     category: string
 [2m117[0m |     difficulty: string
 [2m118[0m |     type: string
 [2m119[0m |     search: string
 [2m120[0m |   }) => {
 [2m121[0m |     try {
 [2m122[0m |       console.log('Fetching data with filters:', filters)
 [2m123[0m |       setError(null)
 [2m124[0m |       
 [2m125[0m |       // Build query parameters for questions API
 [2m126[0m |       const params = new URLSearchParams()
 [2m127[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m128[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m129[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m130[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m131[0m |       if (filters.search) params.set('search', filters.search)
 [2m132[0m | 
 [2m133[0m |       console.log('API URLs:', {
 [2m134[0m |         companies: '/api/companies',
 [2m135[0m |         categories: '/api/categories',
 [2m136[0m |         questions: `/api/questions?${params.toString()}`
 [2m137[0m |       })
 [2m138[0m | 
 [2m139[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m140[0m |         fetch('/api/companies'),
 [2m141[0m |         fetch('/api/categories'),
 [2m142[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m143[0m |       ])
 [2m144[0m | 
 [2m145[0m |       console.log('API responses status:', {
 [2m146[0m |         companies: companiesRes.status,
 [2m147[0m |         categories: categoriesRes.status,
 [2m148[0m |         questions: questionsRes.status
 [2m149[0m |       })
 [2m150[0m | 
 [2m151[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m152[0m |         throw new Error('One or more API calls failed')
 [2m153[0m |       }
 [2m154[0m | 
 [2m155[0m |       const companiesData = await companiesRes.json()
 [2m156[0m |       const categoriesData = await categoriesRes.json()
 [2m157[0m |       const questionsData = await questionsRes.json()
 [2m158[0m | 
 [2m159[0m |       console.log('API data lengths:', {
 [2m160[0m |         companies: companiesData.length,
 [2m161[0m |         categories: categoriesData.length,
 [2m162[0m |         questions: questionsData.length
 [2m163[0m |       })
 [2m164[0m | 
 [2m165[0m |       setCompanies(companiesData || [])
 [2m166[0m |       setCategories(categoriesData || [])
 [2m167[0m |       setQuestions(questionsData || [])
 [2m168[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m169[0m |     } catch (error) {
 [2m170[0m |       console.error('Error fetching data:', error)
 [2m171[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m172[0m |     } finally {
 [2m173[0m |       setLoading(false)
 [2m174[0m |     }
 [2m175[0m |   }
 [2m176[0m | 
 [2m177[0m |   const fetchData = async () => {
 [2m178[0m |     await fetchDataWithParams({
 [2m179[0m |       company: selectedCompany,
 [2m180[0m |       category: selectedCategory,
 [2m181[0m |       difficulty: selectedDifficulty,
 [2m182[0m |       type: selectedType,
 [2m183[0m |       search: searchQuery
 [2m184[0m |     })
 [2m185[0m |   }
 [2m186[0m | 
 [2m187[0m | 
 [2m188[0m | 
 [2m189[0m |   const getStatusIcon = (status: string) => {
 [2m190[0m |     switch (status) {
 [2m191[0m |       case 'PREPARED':
 [2m192[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m193[0m |       case 'IN_PROGRESS':
 [2m194[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m195[0m |       case 'NEEDS_WORK':
 [2m196[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m197[0m |       default:
 [2m198[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m199[0m |     }
 [2m200[0m |   }
 [2m201[0m | 
 [2m202[0m |   const getDifficultyColor = (difficulty: string) => {
 [2m203[0m |     switch (difficulty) {
 [2m204[0m |       case 'EASY':
 [2m205[0m |         return 'bg-green-100 text-green-800'
 [2m206[0m |       case 'MEDIUM':
 [2m207[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m208[0m |       case 'HARD':
 [2m209[0m |         return 'bg-red-100 text-red-800'
 [2m210[0m |       default:
 [2m211[0m |         return 'bg-gray-100 text-gray-800'
 [2m212[0m |     }
 [2m213[0m |   }
 [2m214[0m | 
 [2m215[0m |   const getTypeColor = (type: string) => {
     : [33;1m        ^^^^^^|^^^^^[0m
     :               [33;1m`-- [33;1m`getTypeColor` redefined here[0m[0m
 [2m216[0m |     switch (type) {
 [2m217[0m |       case 'BEHAVIORAL':
 [2m218[0m |         return 'bg-blue-100 text-blue-800'
     `----

Import trace for requested module:
./app/comprehensive/page.tsx
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 â¨¯ ./app/comprehensive/page.tsx
Error: 
  [31mx[0m the name `getDifficultyColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:61:1]
 [2m 61[0m |   const [loading, setLoading] = useState(true)
 [2m 62[0m |   const [error, setError] = useState<string | null>(null)
 [2m 63[0m | 
 [2m 64[0m |   const getDifficultyColor = (difficulty: string) => {
     : [31;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [31;1m`-- [31;1mprevious definition of `getDifficultyColor` here[0m[0m
 [2m 65[0m |     switch (difficulty) {
 [2m 66[0m |       case 'EASY':
 [2m 67[0m |         return 'bg-green-100 text-green-800'
 [2m 68[0m |       case 'MEDIUM':
 [2m 69[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m 70[0m |       case 'HARD':
 [2m 71[0m |         return 'bg-red-100 text-red-800'
 [2m 72[0m |       default:
 [2m 73[0m |         return 'bg-gray-100 text-gray-800'
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     fetchDataWithParams({
 [2m 97[0m |       company: 'all',
 [2m 98[0m |       category: 'all',
 [2m 99[0m |       difficulty: 'all',
 [2m100[0m |       type: 'all',
 [2m101[0m |       search: ''
 [2m102[0m |     })
 [2m103[0m |   }, [])
 [2m104[0m | 
 [2m105[0m |   // Handle filter changes after initial load
 [2m106[0m |   useEffect(() => {
 [2m107[0m |     if (!loading) {
 [2m108[0m |       fetchData()
 [2m109[0m |     }
 [2m110[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m111[0m | 
 [2m112[0m |   const fetchDataWithParams = async (filters: {
 [2m113[0m |     company: string
 [2m114[0m |     category: string
 [2m115[0m |     difficulty: string
 [2m116[0m |     type: string
 [2m117[0m |     search: string
 [2m118[0m |   }) => {
 [2m119[0m |     try {
 [2m120[0m |       console.log('Fetching data with filters:', filters)
 [2m121[0m |       setError(null)
 [2m122[0m |       
 [2m123[0m |       // Build query parameters for questions API
 [2m124[0m |       const params = new URLSearchParams()
 [2m125[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m126[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m127[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m128[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m129[0m |       if (filters.search) params.set('search', filters.search)
 [2m130[0m | 
 [2m131[0m |       console.log('API URLs:', {
 [2m132[0m |         companies: '/api/companies',
 [2m133[0m |         categories: '/api/categories',
 [2m134[0m |         questions: `/api/questions?${params.toString()}`
 [2m135[0m |       })
 [2m136[0m | 
 [2m137[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m138[0m |         fetch('/api/companies'),
 [2m139[0m |         fetch('/api/categories'),
 [2m140[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m141[0m |       ])
 [2m142[0m | 
 [2m143[0m |       console.log('API responses status:', {
 [2m144[0m |         companies: companiesRes.status,
 [2m145[0m |         categories: categoriesRes.status,
 [2m146[0m |         questions: questionsRes.status
 [2m147[0m |       })
 [2m148[0m | 
 [2m149[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m150[0m |         throw new Error('One or more API calls failed')
 [2m151[0m |       }
 [2m152[0m | 
 [2m153[0m |       const companiesData = await companiesRes.json()
 [2m154[0m |       const categoriesData = await categoriesRes.json()
 [2m155[0m |       const questionsData = await questionsRes.json()
 [2m156[0m | 
 [2m157[0m |       console.log('API data lengths:', {
 [2m158[0m |         companies: companiesData.length,
 [2m159[0m |         categories: categoriesData.length,
 [2m160[0m |         questions: questionsData.length
 [2m161[0m |       })
 [2m162[0m | 
 [2m163[0m |       setCompanies(companiesData || [])
 [2m164[0m |       setCategories(categoriesData || [])
 [2m165[0m |       setQuestions(questionsData || [])
 [2m166[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m167[0m |     } catch (error) {
 [2m168[0m |       console.error('Error fetching data:', error)
 [2m169[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m170[0m |     } finally {
 [2m171[0m |       setLoading(false)
 [2m172[0m |     }
 [2m173[0m |   }
 [2m174[0m | 
 [2m175[0m |   const fetchData = async () => {
 [2m176[0m |     await fetchDataWithParams({
 [2m177[0m |       company: selectedCompany,
 [2m178[0m |       category: selectedCategory,
 [2m179[0m |       difficulty: selectedDifficulty,
 [2m180[0m |       type: selectedType,
 [2m181[0m |       search: searchQuery
 [2m182[0m |     })
 [2m183[0m |   }
 [2m184[0m | 
 [2m185[0m | 
 [2m186[0m | 
 [2m187[0m |   const getStatusIcon = (status: string) => {
 [2m188[0m |     switch (status) {
 [2m189[0m |       case 'PREPARED':
 [2m190[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m191[0m |       case 'IN_PROGRESS':
 [2m192[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m193[0m |       case 'NEEDS_WORK':
 [2m194[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m195[0m |       default:
 [2m196[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m197[0m |     }
 [2m198[0m |   }
 [2m199[0m | 
 [2m200[0m |   const getDifficultyColor = (difficulty: string) => {
     : [33;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [33;1m`-- [33;1m`getDifficultyColor` redefined here[0m[0m
 [2m201[0m |     switch (difficulty) {
 [2m202[0m |       case 'EASY':
 [2m203[0m |         return 'bg-green-100 text-green-800'
     `----

  [31mx[0m the name `getTypeColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:74:1]
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
     : [31;1m        ^^^^^^|^^^^^[0m
     :               [31;1m`-- [31;1mprevious definition of `getTypeColor` here[0m[0m
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     fetchDataWithParams({
 [2m 97[0m |       company: 'all',
 [2m 98[0m |       category: 'all',
 [2m 99[0m |       difficulty: 'all',
 [2m100[0m |       type: 'all',
 [2m101[0m |       search: ''
 [2m102[0m |     })
 [2m103[0m |   }, [])
 [2m104[0m | 
 [2m105[0m |   // Handle filter changes after initial load
 [2m106[0m |   useEffect(() => {
 [2m107[0m |     if (!loading) {
 [2m108[0m |       fetchData()
 [2m109[0m |     }
 [2m110[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m111[0m | 
 [2m112[0m |   const fetchDataWithParams = async (filters: {
 [2m113[0m |     company: string
 [2m114[0m |     category: string
 [2m115[0m |     difficulty: string
 [2m116[0m |     type: string
 [2m117[0m |     search: string
 [2m118[0m |   }) => {
 [2m119[0m |     try {
 [2m120[0m |       console.log('Fetching data with filters:', filters)
 [2m121[0m |       setError(null)
 [2m122[0m |       
 [2m123[0m |       // Build query parameters for questions API
 [2m124[0m |       const params = new URLSearchParams()
 [2m125[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m126[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m127[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m128[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m129[0m |       if (filters.search) params.set('search', filters.search)
 [2m130[0m | 
 [2m131[0m |       console.log('API URLs:', {
 [2m132[0m |         companies: '/api/companies',
 [2m133[0m |         categories: '/api/categories',
 [2m134[0m |         questions: `/api/questions?${params.toString()}`
 [2m135[0m |       })
 [2m136[0m | 
 [2m137[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m138[0m |         fetch('/api/companies'),
 [2m139[0m |         fetch('/api/categories'),
 [2m140[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m141[0m |       ])
 [2m142[0m | 
 [2m143[0m |       console.log('API responses status:', {
 [2m144[0m |         companies: companiesRes.status,
 [2m145[0m |         categories: categoriesRes.status,
 [2m146[0m |         questions: questionsRes.status
 [2m147[0m |       })
 [2m148[0m | 
 [2m149[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m150[0m |         throw new Error('One or more API calls failed')
 [2m151[0m |       }
 [2m152[0m | 
 [2m153[0m |       const companiesData = await companiesRes.json()
 [2m154[0m |       const categoriesData = await categoriesRes.json()
 [2m155[0m |       const questionsData = await questionsRes.json()
 [2m156[0m | 
 [2m157[0m |       console.log('API data lengths:', {
 [2m158[0m |         companies: companiesData.length,
 [2m159[0m |         categories: categoriesData.length,
 [2m160[0m |         questions: questionsData.length
 [2m161[0m |       })
 [2m162[0m | 
 [2m163[0m |       setCompanies(companiesData || [])
 [2m164[0m |       setCategories(categoriesData || [])
 [2m165[0m |       setQuestions(questionsData || [])
 [2m166[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m167[0m |     } catch (error) {
 [2m168[0m |       console.error('Error fetching data:', error)
 [2m169[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m170[0m |     } finally {
 [2m171[0m |       setLoading(false)
 [2m172[0m |     }
 [2m173[0m |   }
 [2m174[0m | 
 [2m175[0m |   const fetchData = async () => {
 [2m176[0m |     await fetchDataWithParams({
 [2m177[0m |       company: selectedCompany,
 [2m178[0m |       category: selectedCategory,
 [2m179[0m |       difficulty: selectedDifficulty,
 [2m180[0m |       type: selectedType,
 [2m181[0m |       search: searchQuery
 [2m182[0m |     })
 [2m183[0m |   }
 [2m184[0m | 
 [2m185[0m | 
 [2m186[0m | 
 [2m187[0m |   const getStatusIcon = (status: string) => {
 [2m188[0m |     switch (status) {
 [2m189[0m |       case 'PREPARED':
 [2m190[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m191[0m |       case 'IN_PROGRESS':
 [2m192[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m193[0m |       case 'NEEDS_WORK':
 [2m194[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m195[0m |       default:
 [2m196[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m197[0m |     }
 [2m198[0m |   }
 [2m199[0m | 
 [2m200[0m |   const getDifficultyColor = (difficulty: string) => {
 [2m201[0m |     switch (difficulty) {
 [2m202[0m |       case 'EASY':
 [2m203[0m |         return 'bg-green-100 text-green-800'
 [2m204[0m |       case 'MEDIUM':
 [2m205[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m206[0m |       case 'HARD':
 [2m207[0m |         return 'bg-red-100 text-red-800'
 [2m208[0m |       default:
 [2m209[0m |         return 'bg-gray-100 text-gray-800'
 [2m210[0m |     }
 [2m211[0m |   }
 [2m212[0m | 
 [2m213[0m |   const getTypeColor = (type: string) => {
     : [33;1m        ^^^^^^|^^^^^[0m
     :               [33;1m`-- [33;1m`getTypeColor` redefined here[0m[0m
 [2m214[0m |     switch (type) {
 [2m215[0m |       case 'BEHAVIORAL':
 [2m216[0m |         return 'bg-blue-100 text-blue-800'
     `----

Import trace for requested module:
./app/comprehensive/page.tsx
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/home/ubuntu/em_interview_prep/app/.next/cache/webpack/client-development-fallback/0.pack.gz_' -> '/home/ubuntu/em_interview_prep/app/.next/cache/webpack/client-development-fallback/0.pack.gz'
<w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/home/ubuntu/em_interview_prep/app/.next/cache/webpack/client-development-fallback/0.pack.gz_' -> '/home/ubuntu/em_interview_prep/app/.next/cache/webpack/client-development-fallback/0.pack.gz'
 â¨¯ ./app/comprehensive/page.tsx
Error: 
  [31mx[0m the name `getDifficultyColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:61:1]
 [2m 61[0m |   const [loading, setLoading] = useState(true)
 [2m 62[0m |   const [error, setError] = useState<string | null>(null)
 [2m 63[0m | 
 [2m 64[0m |   const getDifficultyColor = (difficulty: string) => {
     : [31;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [31;1m`-- [31;1mprevious definition of `getDifficultyColor` here[0m[0m
 [2m 65[0m |     switch (difficulty) {
 [2m 66[0m |       case 'EASY':
 [2m 67[0m |         return 'bg-green-100 text-green-800'
 [2m 68[0m |       case 'MEDIUM':
 [2m 69[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m 70[0m |       case 'HARD':
 [2m 71[0m |         return 'bg-red-100 text-red-800'
 [2m 72[0m |       default:
 [2m 73[0m |         return 'bg-gray-100 text-gray-800'
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     fetchDataWithParams({
 [2m 97[0m |       company: 'all',
 [2m 98[0m |       category: 'all',
 [2m 99[0m |       difficulty: 'all',
 [2m100[0m |       type: 'all',
 [2m101[0m |       search: ''
 [2m102[0m |     })
 [2m103[0m |   }, [])
 [2m104[0m | 
 [2m105[0m |   // Handle filter changes after initial load
 [2m106[0m |   useEffect(() => {
 [2m107[0m |     if (!loading) {
 [2m108[0m |       fetchData()
 [2m109[0m |     }
 [2m110[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m111[0m | 
 [2m112[0m |   const fetchDataWithParams = async (filters: {
 [2m113[0m |     company: string
 [2m114[0m |     category: string
 [2m115[0m |     difficulty: string
 [2m116[0m |     type: string
 [2m117[0m |     search: string
 [2m118[0m |   }) => {
 [2m119[0m |     try {
 [2m120[0m |       setError(null)
 [2m121[0m |       
 [2m122[0m |       // Build query parameters for questions API
 [2m123[0m |       const params = new URLSearchParams()
 [2m124[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m125[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m126[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m127[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m128[0m |       if (filters.search) params.set('search', filters.search)
 [2m129[0m | 
 [2m130[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m131[0m |         fetch('/api/companies'),
 [2m132[0m |         fetch('/api/categories'),
 [2m133[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m134[0m |       ])
 [2m135[0m | 
 [2m136[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m137[0m |         throw new Error('One or more API calls failed')
 [2m138[0m |       }
 [2m139[0m | 
 [2m140[0m |       const companiesData = await companiesRes.json()
 [2m141[0m |       const categoriesData = await categoriesRes.json()
 [2m142[0m |       const questionsData = await questionsRes.json()
 [2m143[0m | 
 [2m144[0m |       setCompanies(companiesData || [])
 [2m145[0m |       setCategories(categoriesData || [])
 [2m146[0m |       setQuestions(questionsData || [])
 [2m147[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m148[0m |     } catch (error) {
 [2m149[0m |       console.error('Error fetching data:', error)
 [2m150[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m151[0m |     } finally {
 [2m152[0m |       setLoading(false)
 [2m153[0m |     }
 [2m154[0m |   }
 [2m155[0m | 
 [2m156[0m |   const fetchData = async () => {
 [2m157[0m |     await fetchDataWithParams({
 [2m158[0m |       company: selectedCompany,
 [2m159[0m |       category: selectedCategory,
 [2m160[0m |       difficulty: selectedDifficulty,
 [2m161[0m |       type: selectedType,
 [2m162[0m |       search: searchQuery
 [2m163[0m |     })
 [2m164[0m |   }
 [2m165[0m | 
 [2m166[0m | 
 [2m167[0m | 
 [2m168[0m |   const getStatusIcon = (status: string) => {
 [2m169[0m |     switch (status) {
 [2m170[0m |       case 'PREPARED':
 [2m171[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m172[0m |       case 'IN_PROGRESS':
 [2m173[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m174[0m |       case 'NEEDS_WORK':
 [2m175[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m176[0m |       default:
 [2m177[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m178[0m |     }
 [2m179[0m |   }
 [2m180[0m | 
 [2m181[0m |   const getDifficultyColor = (difficulty: string) => {
     : [33;1m        ^^^^^^^^^|^^^^^^^^[0m
     :                  [33;1m`-- [33;1m`getDifficultyColor` redefined here[0m[0m
 [2m182[0m |     switch (difficulty) {
 [2m183[0m |       case 'EASY':
 [2m184[0m |         return 'bg-green-100 text-green-800'
     `----

  [31mx[0m the name `getTypeColor` is defined multiple times
     ,-[[36;1;4m/home/ubuntu/em_interview_prep/app/app/comprehensive/page.tsx[0m:74:1]
 [2m 74[0m |     }
 [2m 75[0m |   }
 [2m 76[0m | 
 [2m 77[0m |   const getTypeColor = (type: string) => {
     : [31;1m        ^^^^^^|^^^^^[0m
     :               [31;1m`-- [31;1mprevious definition of `getTypeColor` here[0m[0m
 [2m 78[0m |     switch (type) {
 [2m 79[0m |       case 'BEHAVIORAL':
 [2m 80[0m |         return 'bg-blue-100 text-blue-800'
 [2m 81[0m |       case 'SYSTEM_DESIGN':
 [2m 82[0m |         return 'bg-purple-100 text-purple-800'
 [2m 83[0m |       case 'LEADERSHIP':
 [2m 84[0m |         return 'bg-indigo-100 text-indigo-800'
 [2m 85[0m |       case 'CULTURAL_FIT':
 [2m 86[0m |         return 'bg-pink-100 text-pink-800'
 [2m 87[0m |       case 'TECHNICAL':
 [2m 88[0m |         return 'bg-orange-100 text-orange-800'
 [2m 89[0m |       default:
 [2m 90[0m |         return 'bg-gray-100 text-gray-800'
 [2m 91[0m |     }
 [2m 92[0m |   }
 [2m 93[0m | 
 [2m 94[0m |   // Simplified data fetching on mount
 [2m 95[0m |   useEffect(() => {
 [2m 96[0m |     fetchDataWithParams({
 [2m 97[0m |       company: 'all',
 [2m 98[0m |       category: 'all',
 [2m 99[0m |       difficulty: 'all',
 [2m100[0m |       type: 'all',
 [2m101[0m |       search: ''
 [2m102[0m |     })
 [2m103[0m |   }, [])
 [2m104[0m | 
 [2m105[0m |   // Handle filter changes after initial load
 [2m106[0m |   useEffect(() => {
 [2m107[0m |     if (!loading) {
 [2m108[0m |       fetchData()
 [2m109[0m |     }
 [2m110[0m |   }, [selectedCompany, selectedCategory, selectedDifficulty, selectedType, searchQuery])
 [2m111[0m | 
 [2m112[0m |   const fetchDataWithParams = async (filters: {
 [2m113[0m |     company: string
 [2m114[0m |     category: string
 [2m115[0m |     difficulty: string
 [2m116[0m |     type: string
 [2m117[0m |     search: string
 [2m118[0m |   }) => {
 [2m119[0m |     try {
 [2m120[0m |       setError(null)
 [2m121[0m |       
 [2m122[0m |       // Build query parameters for questions API
 [2m123[0m |       const params = new URLSearchParams()
 [2m124[0m |       if (filters.company !== 'all') params.set('company', filters.company)
 [2m125[0m |       if (filters.category !== 'all') params.set('category', filters.category)
 [2m126[0m |       if (filters.difficulty !== 'all') params.set('difficulty', filters.difficulty)
 [2m127[0m |       if (filters.type !== 'all') params.set('type', filters.type)
 [2m128[0m |       if (filters.search) params.set('search', filters.search)
 [2m129[0m | 
 [2m130[0m |       const [companiesRes, categoriesRes, questionsRes] = await Promise.all([
 [2m131[0m |         fetch('/api/companies'),
 [2m132[0m |         fetch('/api/categories'),
 [2m133[0m |         fetch(`/api/questions?${params.toString()}`)
 [2m134[0m |       ])
 [2m135[0m | 
 [2m136[0m |       if (!companiesRes.ok || !categoriesRes.ok || !questionsRes.ok) {
 [2m137[0m |         throw new Error('One or more API calls failed')
 [2m138[0m |       }
 [2m139[0m | 
 [2m140[0m |       const companiesData = await companiesRes.json()
 [2m141[0m |       const categoriesData = await categoriesRes.json()
 [2m142[0m |       const questionsData = await questionsRes.json()
 [2m143[0m | 
 [2m144[0m |       setCompanies(companiesData || [])
 [2m145[0m |       setCategories(categoriesData || [])
 [2m146[0m |       setQuestions(questionsData || [])
 [2m147[0m |       setFilteredQuestions(questionsData || []) // Set filtered questions directly from API
 [2m148[0m |     } catch (error) {
 [2m149[0m |       console.error('Error fetching data:', error)
 [2m150[0m |       setError(error instanceof Error ? error.message : 'Failed to fetch data')
 [2m151[0m |     } finally {
 [2m152[0m |       setLoading(false)
 [2m153[0m |     }
 [2m154[0m |   }
 [2m155[0m | 
 [2m156[0m |   const fetchData = async () => {
 [2m157[0m |     await fetchDataWithParams({
 [2m158[0m |       company: selectedCompany,
 [2m159[0m |       category: selectedCategory,
 [2m160[0m |       difficulty: selectedDifficulty,
 [2m161[0m |       type: selectedType,
 [2m162[0m |       search: searchQuery
 [2m163[0m |     })
 [2m164[0m |   }
 [2m165[0m | 
 [2m166[0m | 
 [2m167[0m | 
 [2m168[0m |   const getStatusIcon = (status: string) => {
 [2m169[0m |     switch (status) {
 [2m170[0m |       case 'PREPARED':
 [2m171[0m |         return <CheckCircle className="w-4 h-4 text-green-600" />
 [2m172[0m |       case 'IN_PROGRESS':
 [2m173[0m |         return <Clock className="w-4 h-4 text-yellow-600" />
 [2m174[0m |       case 'NEEDS_WORK':
 [2m175[0m |         return <AlertCircle className="w-4 h-4 text-red-600" />
 [2m176[0m |       default:
 [2m177[0m |         return <Target className="w-4 h-4 text-gray-400" />
 [2m178[0m |     }
 [2m179[0m |   }
 [2m180[0m | 
 [2m181[0m |   const getDifficultyColor = (difficulty: string) => {
 [2m182[0m |     switch (difficulty) {
 [2m183[0m |       case 'EASY':
 [2m184[0m |         return 'bg-green-100 text-green-800'
 [2m185[0m |       case 'MEDIUM':
 [2m186[0m |         return 'bg-yellow-100 text-yellow-800'
 [2m187[0m |       case 'HARD':
 [2m188[0m |         return 'bg-red-100 text-red-800'
 [2m189[0m |       default:
 [2m190[0m |         return 'bg-gray-100 text-gray-800'
 [2m191[0m |     }
 [2m192[0m |   }
 [2m193[0m | 
 [2m194[0m |   const getTypeColor = (type: string) => {
     : [33;1m        ^^^^^^|^^^^^[0m
     :               [33;1m`-- [33;1m`getTypeColor` redefined here[0m[0m
 [2m195[0m |     switch (type) {
 [2m196[0m |       case 'BEHAVIORAL':
 [2m197[0m |         return 'bg-blue-100 text-blue-800'
     `----

Import trace for requested module:
./app/comprehensive/page.tsx
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
 âš  Fast Refresh had to perform a full reload due to a runtime error.
